# This software is made available for use under the GNU General Public License (GPL).
# A copy of this license is available within the repository for this software and is
# included herein by reference.

############## tabledefs ###############################################################
#   This tabledefs file is for defining the available sets of Digital and PWM ports
# that may be used in your system.  In general, ports may be defined individually or
# in blocks via convenience functions.  Ports may be assigned to GPIO pins from the
# Pico or to PCA9685 boards for PWM or to 74HC595 boards for digital signals.
#
#   There are 10 GPIO pins available for either PWM or digital signals.  Eight are
# buffered with line drivers (GPIO_6, GPIO_7, GPIO_8, GPIO_12, GPIO_13, GPIO_14, GPIO_15,
# and GPIO_20) and two (GPIO_21 and GPIO_22) are not.
#
#   Each PCA9685 boards supports up to 16 PWM outputs.  These can control servos or
# be used to control the brightness of individual LEDs.  If using one or more of these,
# the configurepca9685 convenience function should be used to automagically configure
# all 16 ports on each one.  Down in the Python class that manages the PCA9685 is a
# method that blasts all the control values to the associated board.  To support this
# function, the assigned ports need to be contiguous and configurepca9685 does this.
#
#   Each 595 chip manages 8 digital outputs.  The 595s are linked serially such that
# an interface to one chip accesses all chips in the chain.  Thus, all digital outputs
# from 595s should be configured using a single call to the configure595s convenience
# function.  This makes all the port numbers contiguous within the block assigned to
# the 595 chain and supports rapid setting of digital outputs.
#
#   The remaining GPIO pins assigned to the block outputs on the board may be assigned
# either to a PWM or digital port.  Use addPWMPortTableEntry to assign one pin to one
# PWM port and addDigitalPortTableEntry to assign one pin to one digital port.  NOTE
# that addPWMPortTableEntry and addDigitalPortTableEntry MAY be used to assign ports
# on the PCA9685 and 595 boards but using the convenience functions ensures continuity
# for best performance.
#
#   Since it is quite possible to make mistakes here, there is a test function available
# in main in tables.py.  Simply running "python tables.py -r" will run all the checks to
# validate the configuration herein.  Adding the "-v" option will output all the port
# assignments for additional verification.
############## Define your configuration here ##########################################

### This example defines only the outputs on the board, 8 servos on the 8 buffered gpio pins,
### 16 digital outputs from the 74AHCT595s and 2 digital outputs from the unbufffered gpio pins

# PWM Port Definitions
# Example - Configure two pca9685 boards at addresses 0 and 1 on ports 0-31
# configurepca9685(firstport=0, boardid=0)
# configurepca9685(firstport=16, boardid=1)

# Example - Manually enter a single PWM using a Pico GPIO
# addPWMPortTableEntry(32, {'func':dogpio , 'pin':20})

# Digital Port Definitions
# Example - Manually enter entries like this for each Digital port on a Pico GPIO
# addDigitalPortTableEntry(24, {'func':dogpiodigital , 'pin':22})

# Example - Configure a contiguous block of 16 Digital ports on 2x595 chips
# Note that this example is not commented out as it matches the standard board design
configure595s(firstport=0, portcount=16, datapin=2, clockpin=4, rclkpin=3, clearpin=5)

#Define the remaining 10 GPIO pins buffered pins as PWM and unbuffered pins as digital outputs

# Define GPIO pin 6
addPWMPortTableEntry(0, {'func':dogpio , 'pin':6})
#addDigitalPortTableEntry(16, {'func':dogpiodigital , 'pin':6})

# Define GPIO pin 7
addPWMPortTableEntry(1, {'func':dogpio , 'pin':7})
#addDigitalPortTableEntry(17, {'func':dogpiodigital , 'pin':7})

# Define GPIO pin 8
addPWMPortTableEntry(2, {'func':dogpio , 'pin':8})
#addDigitalPortTableEntry(18, {'func':dogpiodigital , 'pin':8})

# Define GPIO pin 12
addPWMPortTableEntry(3, {'func':dogpio , 'pin':12})
#addDigitalPortTableEntry(19, {'func':dogpiodigital , 'pin':12})

# Define GPIO pin 13
addPWMPortTableEntry(4, {'func':dogpio , 'pin':13})
#addDigitalPortTableEntry(20, {'func':dogpiodigital , 'pin':13})

# Define GPIO pin 14
addPWMPortTableEntry(5, {'func':dogpio , 'pin':14})
#addDigitalPortTableEntry(21, {'func':dogpiodigital , 'pin':14})

# Define GPIO pin 15
addPWMPortTableEntry(6, {'func':dogpio , 'pin':15})
#addDigitalPortTableEntry(22, {'func':dogpiodigital , 'pin':15})

# Define GPIO pin 20
addPWMPortTableEntry(7, {'func':dogpio , 'pin':20})
#addDigitalPortTableEntry(23, {'func':dogpiodigital , 'pin':20})

#2 unbufferd pins as digital outputs

# Define GPIO pin 21
#addPWMPortTableEntry(8, {'func':dogpio , 'pin':21})
addDigitalPortTableEntry(16, {'func':dogpiodigital , 'pin':21})

# Define GPIO pin 22
#addPWMPortTableEntry(9, {'func':dogpio , 'pin':22})
addDigitalPortTableEntry(17, {'func':dogpiodigital , 'pin':22})


setPreferBinary(False)      # Set to True for larger applications








