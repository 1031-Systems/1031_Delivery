import sys
import os
try:
    # Import methods from os.path if on linux system
    from os.path import dirname, exists, isdir, isfile, join
except:
    try:
        # Import methods from upath if on Pico
        from upath import dirname, exists, isdir, isfile, join
    except:
        sys.stderr.write('Whoops - Unable to import path functions')
        sys.exit(10)


class AnimList:
    """
    Class: AnimList
        The AnimList class represents a list of animations to be played.  Each animation is
    represented by a 2-tuple containing the animation control filename in position 0 and the
    audio filename in position 1.  The type Animation refers to this tuple.  The AnimList
    class contains a list of animations in some order.  In simplest terms, AnimList returns
    the next Animation in the list when requested and loops back to the start of the list
    when it reaches the end.
        Additional capabilities include randomizing the playback order by setting the random
    flag and associating triggers with cartain animations so the specifying the trigger will
    always result in the same animation being returned.
        AnimList also supports an idle animation that may be specifically requested.  The 
    idle animation is typically played whenever no other animation is being played.  However,
    the use of the idle animation is controlled by the caller that may never request it.
        The list of available animations is generated by scanning one or more directories in
    which there might exist either a specific file containing a list of animations or a set
    of files that may be associated into Animation tuples by filename.  Multiple directories
    may be scanned and their contents added to the list.

    Attributes
    ----------
        random (bool) : Flag to randomize playback order
        binary (bool) : Flag to require binary control files
        currAnim (Animation) : The current Animation being played
        idleAnim (Animation) : The specified idle animation to play when idle
        theAnims (Animation list) : The list of nonidle animations
        triggers (Dictionary of animations indexed by trigger) : 
            Subset of the animations that are tied to a specific trigger value
        dirs (Directory string list) : List of directories that have been scanned

    Methods
    -------
        __init__(self, inDir=None, random=False, binary=False) : Initialize object
        clearAnims(self) : Clear out all animation data
        refresh(self) : Rescan all previously scanned directories for animations
        getIdleAnim(self) : Returns the specified idle animation
        getNextAnim(self, trigger=None) : Returns the next animation to be played
        addAnims(self, inDir) : Add available animations in specified directory to list
        addAnimList(self, inFile) : Add animations to list from an animation list file
    """
    def __init__(self, inDir=None, random=False, binary=False):
        """
        The method __init__ initializes the class members.
            member of class: AnimList

        Parameters
        ----------
            inDir=None (str) : Name of directory to initially scan for animations.
            random=False (bool) : Flag to randomize playback order.
            binary=False (bool) : Flag to require binary animation files rather than CSV.
        """
        self.random = random
        self.binary = binary
        self.currAnim = 0
        self.idleAnim = None
        self.theAnims = []
        self.triggers = {}
        self.dirs = []

        if inDir is not None:
            self.addAnims(inDir)

    def clearAnims(self):
        """
        The method clearAnims removes all current animations from the list.
            member of class: AnimList

        Parameters
        ----------
        """
        self.currAnim = 0
        self.idleAnim = None
        self.theAnims = []
        self.triggers = {}

    def refresh(self):
        """
        The method refresh rescans all directories previously scanned to update available animations.
            member of class: AnimList

        Parameters
        ----------
        """
        # Refresh the animations from our previous list
        self.clearAnims()
        for dir in self.dirs:
            self.addAnims(dir)

    def getIdleAnim(self):
        """
        The method getIdleAnim returns the animation designated as the idle animation.
            member of class: AnimList

        Parameters
        ----------

        Returns
        -------
        Animation
            Designated idle animation
        """
        return self.idleAnim

    def getNextAnim(self, trigger=None):
        """
        The method getNextAnim returns the animation considered next.  If trigger is None,
        the next in the list, either serially or randomly, will be returned.  If trigger is
        not None, then the animation linked to that trigger is returned and is set as the
        current animation.
            member of class: AnimList

        Parameters
        ----------
            trigger=None (int) : An integer that may be tied to an animation via the
                                triggers dictionary.

        Returns
        -------
        Animation
            The next animation to be played or None if list is empty.
        """
        if self.random:
            self.currAnim = random.randint(0, len(self.theAnims)-1)
        if trigger is not None and trigger in self.triggers:
            self.currAnim = self.triggers[trigger]
        if self.currAnim >= len(self.theAnims):
            self.currAnim = 0
        if self.currAnim < len(self.theAnims):
            self.currAnim += 1
            return self.theAnims[self.currAnim - 1]
        return None

    def addAnims(self, inDir):
        """
            The method addAnims adds the animations in the specified directory to the list.
        If no animation list file is found, this method scans the directory for files with
        the extension .bin if the binary flag is True and .csv if False.  For each file found,
        it looks for a matching file with the extension .wav or .ogg.  If both the animation
        control file and the audio file are found, they are added to the list as an Animation.
        If a file pair whose names end in idle is found with the appropriate extensions, it
        becomes the designated idle animation and replaces any previously found.
        If an animation list file is found, it is processed by addAnimList and this method
        just returns.  An animation list file has the specific filename 'animList'.
            member of class: AnimList

        Parameters
        ----------
            inDir (str) : Name of directory containing animations to be scanned.
        """
        if isdir(inDir):
            # Save this animation directory in our list in case we have to refresh
            if inDir not in self.dirs: self.dirs.append(inDir)
            # Look for animList file
            anlfname = join(inDir, 'animList')
            if isfile(anlfname) and isfile(anlfname):
                self.addAnimList(anlfname)
            else:
                # Find all the matching file pairs
                fileList = os.listdir(inDir)
                fileext = '.csv'
                if self.binary: fileext = '.bin'
                for file in fileList:
                    if not isfile(file):
                        file = join(inDir, file)
                    if len(file) > 4 and file[-4:] == fileext:
                        if file[-8:-4] == 'idle' and isfile(file[:-4] + '.wav'):
                            self.idleAnim = (file, file[:-4] + '.wav')
                        elif isfile(file[:-4] + '.wav'):
                            self.theAnims.append((file, file[:-4] + '.wav'))
                        elif isfile(file[:-4] + '.ogg'):
                            self.theAnims.append((file, file[:-4] + '.ogg'))
        elif isfile(inDir):
            self.addAnimList(inDir)

    def addAnimList(self, inFile):
        """
            The method addAnimList processes an animation list file containing pairs of filenames
        as well as an idle designator or trigger.  The format of the file is:
            # Comments
            [animationfile],[audiofile][,idle/n]
            .
            .
            .
        Each entry consists of a comma-separated list of pairs of filenames with the first name
        specifying the animation control file, with either a .bin or .csv extension, and the
        second name specifying the audio file.  An optional third column allows a particular
        pair to be designated as the idle animation or to be associated with a specific trigger
        index.  Note that either the animation control file or the audio file may be omitted and
        that control files with .bin and .csv extensions may both be used.  This is not possible
        with the built-in scan of the addAnims method.
            member of class: AnimList

        Parameters
        ----------
            inFile (str) : Name of animation list file (animList) to be scanned
        """
        # Read the set of animations from the specified animList file
        path = dirname(inFile)
        with open(inFile, 'r') as f:
            line = f.readline()
            while len(line) > 0:
                if line[0] != '#':  # Skip comment lines
                    # Split on commas
                    values = line.split(',')
                    if len(values) >= 2:                    # Skip malformed lines
                        animfile = values[0].strip()
                        if len(animfile) == 0:
                            animfile = None
                        elif not isfile(animfile):
                            animfile = join(path, animfile)
                            if not isfile(animfile):
                                animfile = None
                        audiofile = values[1].strip()
                        if len(audiofile) == 0:
                            audiofile = None
                        elif not isfile(audiofile):
                            audiofile = join(path, audiofile)
                            if not isfile(audiofile):
                                audiofile = None
                        trigger = -1
                        if len(values) > 2:
                            if values[2].strip() == 'idle' :
                                trigger = 'idle'
                            else:
                                trigger = int(values[2].strip())
                        if trigger == 'idle':
                            self.idleAnim = (animfile, audiofile)
                        else:
                            self.theAnims.append((animfile, audiofile))
                            if trigger >= 0: self.triggers[trigger] = len(self.theAnims) - 1
                line = f.readline()

